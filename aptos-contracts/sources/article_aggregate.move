// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module aptos_blog_demo::article_aggregate {
    use std::signer;
    use aptos_blog_demo::article::{Self, Article};
    use aptos_blog_demo::article_add_comment_logic;
    use aptos_blog_demo::article_create_logic;
    use aptos_blog_demo::article_delete_logic;
    use aptos_blog_demo::article_remove_comment_logic;
    use aptos_blog_demo::article_update_comment_logic;
    use aptos_blog_demo::article_update_logic;
    use std::string::String;
    use aptos_framework::object;
    use aptos_framework::object::Object;

    public entry fun create(
        account: &signer,
        title: String,
        body: String,
        owner: address,
    ) {
        let article_created = article_create_logic::verify(
            account,
            title,
            body,
            owner,
        );
        let account_address = signer::address_of(account);
        let constructor_ref = object::create_object(account_address);
        let object_signer = object::generate_signer(&constructor_ref);
        let extend_ref = object::generate_extend_ref(&constructor_ref);
        let delete_ref = object::generate_delete_ref(&constructor_ref);
        let transfer_ref = object::generate_transfer_ref(&constructor_ref);
        let id = object::address_from_constructor_ref(&constructor_ref);
        let article = article_create_logic::mutate(
            account,
            id,
            &article_created,
        );
        article::add_article(&object_signer, article);
        article::save_object_controller(&object_signer,
            extend_ref,
            delete_ref,
            transfer_ref,
        );
        article::set_article_created_id(&mut article_created, id);
        article::emit_article_created(article_created);
    }

    public entry fun update(
        account: &signer,
        article_obj: Object<Article>,
        title: String,
        body: String,
        owner: address,
    ) {
        let id = object::object_address(&article_obj);
        let article = article::remove_article(id);
        //let version = article::version(&article);
        let article_updated = article_update_logic::verify(
            account,
            title,
            body,
            owner,
            id,
            &article,
        );
        article_update_logic::mutate(
            account,
            &article_updated,
            id,
            &mut article,
        );
        article::update_version_and_add(id, article);
        article::emit_article_updated(article_updated);
    }

    public entry fun delete(
        account: &signer,
        article_obj: Object<Article>,
    ) {
        let id = object::object_address(&article_obj);
        let article = article::remove_article(id);
        let article_deleted = article_delete_logic::verify(
            account,
            id,
            &mut article,
        );
        article_delete_logic::mutate(
            account,
            &article_deleted,
            id,
            &mut article,
        );
        article::drop_article(article);
        article::delete_article(id);
        article::emit_article_deleted(article_deleted);
    }

    public entry fun add_comment(
        account: &signer,
        article_obj: Object<Article>,
        commenter: String,
        body: String,
        owner: address,
    ) {
        let id = object::object_address(&article_obj);
        let article = article::remove_article(id);
        //let version = article::version(&article);
        let comment_added = article_add_comment_logic::verify(
            account,
            commenter,
            body,
            owner,
            id,
            &article,
        );
        article_add_comment_logic::mutate(
            account,
            &comment_added,
            id,
            &mut article,
        );
        article::update_version_and_add(id, article);
        article::emit_comment_added(comment_added);
    }

    public entry fun update_comment(
        account: &signer,
        article_obj: Object<Article>,
        comment_seq_id: u64,
        commenter: String,
        body: String,
        owner: address,
    ) {
        let id = object::object_address(&article_obj);
        let article = article::remove_article(id);
        //let version = article::version(&article);
        let comment_updated = article_update_comment_logic::verify(
            account,
            comment_seq_id,
            commenter,
            body,
            owner,
            id,
            &article,
        );
        article_update_comment_logic::mutate(
            account,
            &comment_updated,
            id,
            &mut article,
        );
        article::update_version_and_add(id, article);
        article::emit_comment_updated(comment_updated);
    }

    public entry fun remove_comment(
        account: &signer,
        article_obj: Object<Article>,
        comment_seq_id: u64,
    ) {
        let id = object::object_address(&article_obj);
        let article = article::remove_article(id);
        //let version = article::version(&article);
        let comment_removed = article_remove_comment_logic::verify(
            account,
            comment_seq_id,
            id,
            &article,
        );
        article_remove_comment_logic::mutate(
            account,
            &comment_removed,
            id,
            &mut article,
        );
        article::update_version_and_add(id, article);
        article::emit_comment_removed(comment_removed);
    }

}
