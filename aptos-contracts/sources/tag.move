// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module aptos_blog_demo::tag {
    use aptos_blog_demo::genesis_account;
    use aptos_framework::account;
    use aptos_framework::event;
    use aptos_framework::object;
    use std::option;
    use std::string::String;
    friend aptos_blog_demo::tag_create_logic;
    friend aptos_blog_demo::tag_aggregate;

    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const ENotInitialized: u64 = 110;

    struct Events has key {
        tag_created_handle: event::EventHandle<TagCreated>,
    }

    public fun initialize(account: &signer) {
        genesis_account::assert_genesis_account(account);

        let res_account = genesis_account::resource_account_signer();
        move_to(&res_account, Events {
            tag_created_handle: account::new_event_handle<TagCreated>(&res_account),
        });

    }

    #[resource_group_member(group = aptos_framework::object::ObjectGroup)]
    struct Tag has key {
        version: u64,
        name: String,
    }

    #[resource_group_member(group = aptos_framework::object::ObjectGroup)]
    struct ObjectController has key {
        extend_ref: object::ExtendRef,
        delete_ref: object::DeleteRef,
        transfer_ref: object::TransferRef,
    }


    public(friend) fun save_object_controller(
        object_signer: &signer,
        extend_ref: object::ExtendRef,
        delete_ref: object::DeleteRef,
        transfer_ref: object::TransferRef,
    ) {
        move_to(
            object_signer,
            ObjectController {
                extend_ref,
                delete_ref,
                transfer_ref
            }
        )
    }

    public fun version(tag: &Tag): u64 {
        tag.version
    }

    public fun name(tag: &Tag): String {
        tag.name
    }

    public(friend) fun set_name(tag: &mut Tag, name: String) {
        assert!(std::string::length(&name) <= 50, EDataTooLong);
        tag.name = name;
    }

    public(friend) fun new_tag(
        name: String,
    ): Tag {
        assert!(std::string::length(&name) <= 50, EDataTooLong);
        Tag {
            version: 0,
            name,
        }
    }

    struct TagCreated has store, drop {
        tag_id: option::Option<address>,
        name: String,
    }

    public fun tag_created_tag_id(tag_created: &TagCreated): option::Option<address> {
        tag_created.tag_id
    }

    public(friend) fun set_tag_created_tag_id(tag_created: &mut TagCreated, tag_id: address) {
        tag_created.tag_id = option::some(tag_id);
    }

    public fun tag_created_name(tag_created: &TagCreated): String {
        tag_created.name
    }

    public(friend) fun new_tag_created(
        name: String,
    ): TagCreated {
        TagCreated {
            tag_id: option::none(),
            name,
        }
    }


    public(friend) fun update_version_and_add(obj_addr: address, tag: Tag) acquires ObjectController {
        tag.version = tag.version + 1;
        let extend_ref = &borrow_global<ObjectController>(obj_addr).extend_ref;
        let object_signer = object::generate_signer_for_extending(extend_ref);
        private_add_tag(&object_signer, tag)
    }

    public(friend) fun add_tag(object_signer: &signer, tag: Tag) {
        assert!(tag.version == 0, EInappropriateVersion);
        private_add_tag(object_signer, tag);
    }

    public(friend) fun remove_tag(obj_addr: address): Tag acquires Tag {
        move_from<Tag>(obj_addr)
    }

    fun private_add_tag(object_signer: &signer, tag: Tag) {
        move_to(object_signer, tag);
    }

    public(friend) fun delete_tag(obj_addr: address) acquires ObjectController {
        let ObjectController {
            extend_ref: _extend_ref,
            delete_ref,
            transfer_ref: _transfer_ref,
        } = move_from<ObjectController>(
            obj_addr
        );
        object::delete(delete_ref)
    }

//    public fun get_tag(obj_addr: address): pass_object::PassObject<Tag> acquires Tag {
//        let tag = remove_tag(obj_addr);
//        pass_object::new(tag)
//    }
//
//    public fun return_tag(object_signer: &signer, tag_pass_obj: pass_object::PassObject<Tag>) {
//        assert!(std::signer::address_of(object_signer) == obj_addr, EInappropriateObjectAddress);
//        let tag = pass_object::extract(tag_pass_obj);
//        private_add_tag(object_signer, tag);
//    }

    public(friend) fun drop_tag(tag: Tag) {
        let Tag {
            version: _version,
            name: _name,
        } = tag;
    }

    public(friend) fun emit_tag_created(tag_created: TagCreated) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.tag_created_handle, tag_created);
    }

}
