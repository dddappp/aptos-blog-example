// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module aptos_blog_demo::blog {
    use aptos_blog_demo::genesis_account;
    use aptos_blog_demo::pass_object;
    use aptos_framework::account;
    use aptos_framework::aptos_coin::AptosCoin;
    use aptos_framework::coin::Coin;
    use aptos_framework::event;
    use aptos_framework::fungible_asset::FungibleStore;
    use aptos_framework::object::Object;
    use std::option::Option;
    use std::string::String;
    friend aptos_blog_demo::blog_create_logic;
    friend aptos_blog_demo::blog_add_article_logic;
    friend aptos_blog_demo::blog_remove_article_logic;
    friend aptos_blog_demo::blog_donate_logic;
    friend aptos_blog_demo::blog_withdraw_logic;
    friend aptos_blog_demo::blog_init_fa_vault_logic;
    friend aptos_blog_demo::blog_donate_fa_logic;
    friend aptos_blog_demo::blog_update_logic;
    friend aptos_blog_demo::blog_delete_logic;
    friend aptos_blog_demo::blog_aggregate;

    const EDataTooLong: u64 = 102;
    const EInappropriateVersion: u64 = 103;
    const ENotInitialized: u64 = 110;

    struct Events has key {
        blog_created_handle: event::EventHandle<BlogCreated>,
        article_added_to_blog_handle: event::EventHandle<ArticleAddedToBlog>,
        article_removed_from_blog_handle: event::EventHandle<ArticleRemovedFromBlog>,
        donation_received_handle: event::EventHandle<DonationReceived>,
        vault_withdrawn_handle: event::EventHandle<VaultWithdrawn>,
        init_fa_vault_event_handle: event::EventHandle<InitFaVaultEvent>,
        fa_donation_received_handle: event::EventHandle<FaDonationReceived>,
        blog_updated_handle: event::EventHandle<BlogUpdated>,
        blog_deleted_handle: event::EventHandle<BlogDeleted>,
    }

    public fun initialize(account: &signer) {
        genesis_account::assert_genesis_account(account);

        let res_account = genesis_account::resource_account_signer();
        move_to(&res_account, Events {
            blog_created_handle: account::new_event_handle<BlogCreated>(&res_account),
            article_added_to_blog_handle: account::new_event_handle<ArticleAddedToBlog>(&res_account),
            article_removed_from_blog_handle: account::new_event_handle<ArticleRemovedFromBlog>(&res_account),
            donation_received_handle: account::new_event_handle<DonationReceived>(&res_account),
            vault_withdrawn_handle: account::new_event_handle<VaultWithdrawn>(&res_account),
            init_fa_vault_event_handle: account::new_event_handle<InitFaVaultEvent>(&res_account),
            fa_donation_received_handle: account::new_event_handle<FaDonationReceived>(&res_account),
            blog_updated_handle: account::new_event_handle<BlogUpdated>(&res_account),
            blog_deleted_handle: account::new_event_handle<BlogDeleted>(&res_account),
        });

    }

    struct Blog has key, store {
        version: u64,
        name: String,
        articles: vector<address>,
        vault: Coin<AptosCoin>,
        is_emergency: bool,
        fa_vault: Option<Object<FungibleStore>>,
    }

    public fun version(blog: &Blog): u64 {
        blog.version
    }

    public fun name(blog: &Blog): String {
        blog.name
    }

    public(friend) fun set_name(blog: &mut Blog, name: String) {
        assert!(std::string::length(&name) <= 200, EDataTooLong);
        blog.name = name;
    }

    public fun borrow_articles(blog: &Blog): &vector<address> {
        &blog.articles
    }

    public(friend) fun borrow_mut_articles(blog: &mut Blog): &mut vector<address> {
        &mut blog.articles
    }

    public fun articles(blog: &Blog): vector<address> {
        blog.articles
    }

    public(friend) fun set_articles(blog: &mut Blog, articles: vector<address>) {
        blog.articles = articles;
    }

    public fun borrow_vault(blog: &Blog): &Coin<AptosCoin> {
        &blog.vault
    }

    public(friend) fun borrow_mut_vault(blog: &mut Blog): &mut Coin<AptosCoin> {
        &mut blog.vault
    }

    public fun is_emergency(blog: &Blog): bool {
        blog.is_emergency
    }

    public(friend) fun set_is_emergency(blog: &mut Blog, is_emergency: bool) {
        blog.is_emergency = is_emergency;
    }

    public fun fa_vault(blog: &Blog): Option<Object<FungibleStore>> {
        blog.fa_vault
    }

    public(friend) fun set_fa_vault(blog: &mut Blog, fa_vault: Option<Object<FungibleStore>>) {
        blog.fa_vault = fa_vault;
    }

    public(friend) fun new_blog(
    ): Blog {
        Blog {
            version: 0,
            name: std::string::utf8(b""),
            articles: std::vector::empty(),
            vault: aptos_framework::coin::zero(),
            is_emergency: false,
            fa_vault: std::option::none(),
        }
    }

    struct BlogCreated has store, drop {
        name: String,
        is_emergency: bool,
    }

    public fun blog_created_name(blog_created: &BlogCreated): String {
        blog_created.name
    }

    public fun blog_created_is_emergency(blog_created: &BlogCreated): bool {
        blog_created.is_emergency
    }

    public(friend) fun new_blog_created(
        name: String,
        is_emergency: bool,
    ): BlogCreated {
        BlogCreated {
            name,
            is_emergency,
        }
    }

    struct ArticleAddedToBlog has store, drop {
        version: u64,
        article_id: address,
    }

    public fun article_added_to_blog_article_id(article_added_to_blog: &ArticleAddedToBlog): address {
        article_added_to_blog.article_id
    }

    public(friend) fun new_article_added_to_blog(
        blog: &Blog,
        article_id: address,
    ): ArticleAddedToBlog {
        ArticleAddedToBlog {
            version: version(blog),
            article_id,
        }
    }

    struct ArticleRemovedFromBlog has store, drop {
        version: u64,
        article_id: address,
    }

    public fun article_removed_from_blog_article_id(article_removed_from_blog: &ArticleRemovedFromBlog): address {
        article_removed_from_blog.article_id
    }

    public(friend) fun new_article_removed_from_blog(
        blog: &Blog,
        article_id: address,
    ): ArticleRemovedFromBlog {
        ArticleRemovedFromBlog {
            version: version(blog),
            article_id,
        }
    }

    struct DonationReceived has store, drop {
        version: u64,
        amount: u64,
    }

    public fun donation_received_amount(donation_received: &DonationReceived): u64 {
        donation_received.amount
    }

    public(friend) fun new_donation_received(
        blog: &Blog,
        amount: u64,
    ): DonationReceived {
        DonationReceived {
            version: version(blog),
            amount,
        }
    }

    struct VaultWithdrawn has store, drop {
        version: u64,
        amount: u64,
    }

    public fun vault_withdrawn_amount(vault_withdrawn: &VaultWithdrawn): u64 {
        vault_withdrawn.amount
    }

    public(friend) fun new_vault_withdrawn(
        blog: &Blog,
        amount: u64,
    ): VaultWithdrawn {
        VaultWithdrawn {
            version: version(blog),
            amount,
        }
    }

    struct InitFaVaultEvent has store, drop {
        version: u64,
        metadata: address,
    }

    public fun init_fa_vault_event_metadata(init_fa_vault_event: &InitFaVaultEvent): address {
        init_fa_vault_event.metadata
    }

    public(friend) fun new_init_fa_vault_event(
        blog: &Blog,
        metadata: address,
    ): InitFaVaultEvent {
        InitFaVaultEvent {
            version: version(blog),
            metadata,
        }
    }

    struct FaDonationReceived has store, drop {
        version: u64,
        fa_amount: u64,
    }

    public fun fa_donation_received_fa_amount(fa_donation_received: &FaDonationReceived): u64 {
        fa_donation_received.fa_amount
    }

    public(friend) fun new_fa_donation_received(
        blog: &Blog,
        fa_amount: u64,
    ): FaDonationReceived {
        FaDonationReceived {
            version: version(blog),
            fa_amount,
        }
    }

    struct BlogUpdated has store, drop {
        version: u64,
        name: String,
        articles: vector<address>,
        is_emergency: bool,
        fa_vault: Option<Object<FungibleStore>>,
    }

    public fun blog_updated_name(blog_updated: &BlogUpdated): String {
        blog_updated.name
    }

    public fun blog_updated_articles(blog_updated: &BlogUpdated): vector<address> {
        blog_updated.articles
    }

    public fun blog_updated_is_emergency(blog_updated: &BlogUpdated): bool {
        blog_updated.is_emergency
    }

    public fun blog_updated_fa_vault(blog_updated: &BlogUpdated): Option<Object<FungibleStore>> {
        blog_updated.fa_vault
    }

    public(friend) fun set_blog_updated_fa_vault(blog_updated: &mut BlogUpdated, fa_vault: Option<Object<FungibleStore>>) {
        blog_updated.fa_vault = fa_vault;
    }

    public(friend) fun new_blog_updated(
        blog: &Blog,
        name: String,
        articles: vector<address>,
        is_emergency: bool,
        fa_vault: Option<Object<FungibleStore>>,
    ): BlogUpdated {
        BlogUpdated {
            version: version(blog),
            name,
            articles,
            is_emergency,
            fa_vault,
        }
    }

    struct BlogDeleted has store, drop {
        version: u64,
    }

    public(friend) fun new_blog_deleted(
        blog: &Blog,
    ): BlogDeleted {
        BlogDeleted {
            version: version(blog),
        }
    }


    public(friend) fun update_version_and_add(blog: Blog) {
        blog.version = blog.version + 1;
        //assert!(blog.version != 0, EInappropriateVersion);
        private_add_blog(blog);
    }

    public(friend) fun add_blog(blog: Blog) {
        assert!(blog.version == 0, EInappropriateVersion);
        private_add_blog(blog);
    }

    public(friend) fun remove_blog(): Blog acquires Blog {
        assert!(exists<Blog>(genesis_account::resource_account_address()), ENotInitialized);
        move_from<Blog>(genesis_account::resource_account_address())
    }

    fun private_add_blog(blog: Blog) {
        move_to(&genesis_account::resource_account_signer(), blog);
    }

    public fun get_blog(): pass_object::PassObject<Blog> acquires Blog {
        let blog = remove_blog();
        pass_object::new(blog)
    }

    public fun singleton_name(): String acquires Blog {
        let blog = borrow_global<Blog>(genesis_account::resource_account_address());
        blog.name
    }

    public fun singleton_articles_length(): u64 acquires Blog {
        let blog = borrow_global<Blog>(genesis_account::resource_account_address());
        std::vector::length(&blog.articles)
    }

    public fun singleton_articles_get(i: u64): address acquires Blog {
        let blog = borrow_global<Blog>(genesis_account::resource_account_address());
        *std::vector::borrow(&blog.articles, i)
    }

    public(friend) fun singleton_articles_set(i: u64, article :address) acquires Blog {
        let blog = borrow_global_mut<Blog>(genesis_account::resource_account_address());
        std::vector::remove(&mut blog.articles, i);
        std::vector::insert(&mut blog.articles, i, article)
    }

    public(friend) fun singleton_articles_push_back(article :address) acquires Blog {
        let blog = borrow_global_mut<Blog>(genesis_account::resource_account_address());
        std::vector::push_back(&mut blog.articles, article)
    }

    public fun singleton_articles(): vector<address> acquires Blog {
        let blog = borrow_global<Blog>(genesis_account::resource_account_address());
        blog.articles
    }

    public fun singleton_is_emergency(): bool acquires Blog {
        let blog = borrow_global<Blog>(genesis_account::resource_account_address());
        blog.is_emergency
    }

    public fun singleton_fa_vault(): Option<Object<FungibleStore>> acquires Blog {
        let blog = borrow_global<Blog>(genesis_account::resource_account_address());
        blog.fa_vault
    }

    public fun return_blog(blog_pass_obj: pass_object::PassObject<Blog>) {
        let blog = pass_object::extract(blog_pass_obj);
        private_add_blog(blog);
    }

    public(friend) fun drop_blog(blog: Blog) {
        let Blog {
            version: _version,
            name: _name,
            articles: _articles,
            vault,
            is_emergency: _is_emergency,
            fa_vault: _fa_vault,
        } = blog;
        aptos_framework::coin::destroy_zero(vault);
    }

    public fun blog_exists(): bool {
        exists<Blog>(genesis_account::resource_account_address())
    }

    public(friend) fun emit_blog_created(blog_created: BlogCreated) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.blog_created_handle, blog_created);
    }

    public(friend) fun emit_article_added_to_blog(article_added_to_blog: ArticleAddedToBlog) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.article_added_to_blog_handle, article_added_to_blog);
    }

    public(friend) fun emit_article_removed_from_blog(article_removed_from_blog: ArticleRemovedFromBlog) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.article_removed_from_blog_handle, article_removed_from_blog);
    }

    public(friend) fun emit_donation_received(donation_received: DonationReceived) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.donation_received_handle, donation_received);
    }

    public(friend) fun emit_vault_withdrawn(vault_withdrawn: VaultWithdrawn) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.vault_withdrawn_handle, vault_withdrawn);
    }

    public(friend) fun emit_init_fa_vault_event(init_fa_vault_event: InitFaVaultEvent) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.init_fa_vault_event_handle, init_fa_vault_event);
    }

    public(friend) fun emit_fa_donation_received(fa_donation_received: FaDonationReceived) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.fa_donation_received_handle, fa_donation_received);
    }

    public(friend) fun emit_blog_updated(blog_updated: BlogUpdated) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.blog_updated_handle, blog_updated);
    }

    public(friend) fun emit_blog_deleted(blog_deleted: BlogDeleted) acquires Events {
        assert!(exists<Events>(genesis_account::resource_account_address()), ENotInitialized);
        let events = borrow_global_mut<Events>(genesis_account::resource_account_address());
        event::emit_event(&mut events.blog_deleted_handle, blog_deleted);
    }

}
