// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosblogdemo.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import org.test.aptosblogdemo.aptos.contract.AptosAccount;
import org.test.aptosblogdemo.aptos.contract.ContractConstants;
import org.test.aptosblogdemo.aptos.contract.DomainBeanUtils;
import org.test.aptosblogdemo.aptos.contract.repository.AptosAccountRepository;
import org.test.aptosblogdemo.domain.article.*;
import org.test.aptosblogdemo.domain.*;
import org.test.aptosblogdemo.aptos.contract.Article;
import org.test.aptosblogdemo.aptos.contract.Comment;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosArticleStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, ArticleState.MutableArticleState> articleStateFactory;

    private BiFunction<ArticleState, BigInteger, CommentState.MutableCommentState> commentStateFactory;

    private CommentCommentSeqIdsGetter commentCommentSeqIdsGetter;


    public AptosArticleStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, ArticleState.MutableArticleState> articleStateFactory,
                                    BiFunction<ArticleState, BigInteger, CommentState.MutableCommentState> commentStateFactory,
                                    CommentCommentSeqIdsGetter commentCommentSeqIdsGetter
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.articleStateFactory = articleStateFactory;
        this.commentStateFactory = commentStateFactory;
        this.commentCommentSeqIdsGetter = commentCommentSeqIdsGetter;
    }

    public ArticleState retrieveArticleState(String id) {
        AccountResource<Article> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(id,
                    this.aptosContractAddress + "::" + ContractConstants.ARTICLE_MODULE_TABLES,
                    Article.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        Article article = accountResource.getData();
        if (article == null) {
            return null;
        }
        article.setId(id);
        return toArticleState(article);
    }

    private ArticleState toArticleState(Article article) {
        ArticleState.MutableArticleState articleState = articleStateFactory.apply(article.getId());
        articleState.setVersion(article.getVersion());
        articleState.setTitle(article.getTitle());
        articleState.setBody(article.getBody());
        articleState.setOwner(article.getOwner());
        if (article.getComments() != null) {
            String commentTableHandle = article.getComments().getInner().getHandle();
            List<Comment> comments = getComments(commentTableHandle, commentCommentSeqIdsGetter.getCommentCommentSeqIds(articleState.getId()));
            for (Comment i : comments) {
                ((EntityStateCollection.ModifiableEntityStateCollection)articleState.getComments()).add(toCommentState(articleState, i));
            }
        }

        return articleState;
    }

    private CommentState toCommentState(ArticleState articleState, Comment comment) {
        CommentState.MutableCommentState commentState = commentStateFactory.apply(articleState, comment.getCommentSeqId());
        commentState.setCommenter(comment.getCommenter());
        commentState.setBody(comment.getBody());
        commentState.setOwner(comment.getOwner());
        return commentState;
    }

    private List<Comment> getComments(String commentTableHandle, List<BigInteger> commentSeqIds) {
        List<Comment> comments = new ArrayList<>();

        for (BigInteger commentSeqId : commentSeqIds) {
            Comment comment;
            try {
                comment = aptosNodeApiClient.getTableItem(
                        commentTableHandle,
                        ContractConstants.toNumericalAddressType(ContractConstants.COMMENT_ID_TYPE, this.aptosContractAddress),
                        this.aptosContractAddress + "::" + ContractConstants.COMMENT_MODULE_COMMENT,
                        commentSeqId.toString(),
                        Comment.class,
                        null
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            if (comment != null)
            {
                comments.add(comment);
            }
        }
        return comments;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

    public interface CommentCommentSeqIdsGetter {
        List<BigInteger> getCommentCommentSeqIds(String articleId);
    }

}

