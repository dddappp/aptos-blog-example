// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosblogdemo.aptos.contract.service;

import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.bean.SignerCapability;
import com.github.wubuku.aptos.utils.NodeApiClient;
import org.test.aptosblogdemo.aptos.contract.AptosAccount;
import org.test.aptosblogdemo.aptos.contract.ContractConstants;
import org.test.aptosblogdemo.aptos.contract.repository.AptosAccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;

@Service
public class ContractInitService {
    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private NodeApiClient aptosNodeApiClient;

    @Value("${aptos.contract.address}")
    private String aptosContractAddress;

    @Transactional
    public void initAccountAddresses() {
        String[] resourceTypes = new String[] {
                aptosContractAddress + "::" + ContractConstants.RESOURCE_ACCOUNT_MODULE_CAP_STRUCT,
        };
        String[] accountNames = new String[] {
                ContractConstants.RESOURCE_ACCOUNT,
        };
        for (int i = 0; i < resourceTypes.length; i++) {
            try {
                String resourceType = resourceTypes[i];
                AccountResource<ResourceAccount> resource = aptosNodeApiClient.getAccountResource(aptosContractAddress,
                        resourceType, ResourceAccount.class, null);
                if (resource != null) {
                    saveResourceAccountIfNotExists(accountNames[i], resource.getData().getCap().getAccount());
                }
            } catch (Exception e) {
                e.printStackTrace();
                // NOTE: NOT throw new RuntimeException(e);
            }
        }
    }

    private void saveResourceAccountIfNotExists(String accountName, String address) {
        if (aptosAccountRepository.findById(accountName).isPresent()) {
            return;
        }
        AptosAccount aptosAccount = new AptosAccount();
        aptosAccount.setName(accountName);
        aptosAccount.setAddress(address);
        aptosAccountRepository.save(aptosAccount);
    }

    static class ResourceAccount {
        private SignerCapability cap;

        public SignerCapability getCap() {
            return cap;
        }

        public void setCap(SignerCapability cap) {
            this.cap = cap;
        }

        @Override
        public String toString() {
            return "ResourceAccount{" +
                    "cap=" + cap +
                    '}';
        }
    }
}
