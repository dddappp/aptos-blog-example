// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosblogdemo.domain.article;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.math.BigInteger;
import java.util.Date;
import org.test.aptosblogdemo.domain.*;
import org.test.aptosblogdemo.specialization.*;

public abstract class AbstractArticleApplicationService implements ArticleApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private ArticleStateRepository stateRepository;

    protected ArticleStateRepository getStateRepository() {
        return stateRepository;
    }

    private ArticleStateQueryRepository stateQueryRepository;

    protected ArticleStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<ArticleAggregate, ArticleState> aggregateEventListener;

    public AggregateEventListener<ArticleAggregate, ArticleState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<ArticleAggregate, ArticleState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractArticleApplicationService(EventStore eventStore, ArticleStateRepository stateRepository, ArticleStateQueryRepository stateQueryRepository) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(ArticleCommands.AddTag c) {
        update(c, ar -> ar.addTag(c.getTag(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(ArticleCommands.Create c) {
        update(c, ar -> ar.create(c.getTitle(), c.getBody(), c.getOwner(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(ArticleCommands.Update c) {
        update(c, ar -> ar.update(c.getTitle(), c.getBody(), c.getOwner(), c.getTags(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(ArticleCommands.Delete c) {
        update(c, ar -> ar.delete(c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(ArticleCommands.AddComment c) {
        update(c, ar -> ar.addComment(c.getCommenter(), c.getBody(), c.getOwner(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(ArticleCommands.UpdateComment c) {
        update(c, ar -> ar.updateComment(c.getCommentSeqId(), c.getCommenter(), c.getBody(), c.getOwner(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(ArticleCommands.RemoveComment c) {
        update(c, ar -> ar.removeComment(c.getCommentSeqId(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public ArticleState get(String id) {
        ArticleState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<ArticleState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<ArticleState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<ArticleState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<ArticleState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public ArticleEvent getEvent(String id, long version) {
        ArticleEvent e = (ArticleEvent)getEventStore().getEvent(toEventStoreAggregateId(id), version);
        if (e != null) {
            ((ArticleEvent.SqlArticleEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(id, 0);
        }
        return e;
    }

    public ArticleState getHistoryState(String id, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractArticleEvent.class, toEventStoreAggregateId(id), version - 1);
        return new AbstractArticleState.SimpleArticleState(eventStream.getEvents());
    }

    public CommentState getComment(String articleId, BigInteger commentSeqId) {
        return getStateQueryRepository().getComment(articleId, commentSeqId);
    }

    public Iterable<CommentState> getComments(String articleId, Criterion filter, List<String> orders) {
        return getStateQueryRepository().getComments(articleId, filter, orders);
    }


    public ArticleAggregate getArticleAggregate(ArticleState state) {
        return new AbstractArticleAggregate.SimpleArticleAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(ArticleCommand c, Consumer<ArticleAggregate> action) {
        String aggregateId = c.getId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        ArticleState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        ArticleAggregate aggregate = getArticleAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getOffChainVersion() == null ? ArticleState.VERSION_NULL : c.getOffChainVersion(), aggregate, state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, ArticleAggregate aggregate, ArticleState state) {
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    protected boolean isDuplicateCommand(ArticleCommand command, EventStoreAggregateId eventStoreAggregateId, ArticleState state) {
        boolean duplicate = false;
        if (command.getOffChainVersion() == null) { command.setOffChainVersion(ArticleState.VERSION_NULL); }
        if (state.getOffChainVersion() != null && state.getOffChainVersion() > command.getOffChainVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractArticleEvent.class, eventStoreAggregateId, command.getOffChainVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimpleArticleApplicationService extends AbstractArticleApplicationService {
        public SimpleArticleApplicationService(EventStore eventStore, ArticleStateRepository stateRepository, ArticleStateQueryRepository stateQueryRepository)
        {
            super(eventStore, stateRepository, stateQueryRepository);
        }
    }

}

