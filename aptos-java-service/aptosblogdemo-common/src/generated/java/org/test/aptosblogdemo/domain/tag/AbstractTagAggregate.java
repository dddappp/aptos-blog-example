// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosblogdemo.domain.tag;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.aptosblogdemo.domain.*;
import org.test.aptosblogdemo.specialization.*;

public abstract class AbstractTagAggregate extends AbstractAggregate implements TagAggregate {
    private TagState.MutableTagState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractTagAggregate(TagState state) {
        this.state = (TagState.MutableTagState)state;
    }

    public TagState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        TagCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleTagAggregate extends AbstractTagAggregate {
        public SimpleTagAggregate(TagState state) {
            super(state);
        }

        @Override
        public void create(String name, Long offChainVersion, String commandId, String requesterId, TagCommands.Create c) {
            java.util.function.Supplier<TagEvent.TagCreated> eventFactory = () -> newTagCreated(name, offChainVersion, commandId, requesterId);
            TagEvent.TagCreated e;
            try {
                e = verifyCreate(eventFactory, name, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected TagEvent.TagCreated verifyCreate(java.util.function.Supplier<TagEvent.TagCreated> eventFactory, String name, TagCommands.Create c) {
            String Name = name;

            TagEvent.TagCreated e = (TagEvent.TagCreated) ApplicationContext.current.get(ICreateLogic.class).verify(
                    eventFactory, getState(), name, VerificationContext.of(c));

            return e;
        }

        protected AbstractTagEvent.TagCreated newTagCreated(String name, Long offChainVersion, String commandId, String requesterId) {
            TagEventId eventId = new TagEventId(getState().getTagId(), null);
            AbstractTagEvent.TagCreated e = new AbstractTagEvent.TagCreated();

            e.setName(name);
            e.setAptosEventVersion(null);
            e.setAptosEventSequenceNumber(null);
            e.setAptosEventType(null);
            e.setAptosEventGuid(null);
            e.setStatus(null);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setTagEventId(eventId);
            return e;
        }

    }

}

