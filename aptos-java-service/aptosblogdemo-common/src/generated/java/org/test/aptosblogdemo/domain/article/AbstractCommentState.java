// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosblogdemo.domain.article;

import java.util.*;
import java.math.*;
import java.util.Date;
import java.math.BigInteger;
import org.test.aptosblogdemo.domain.*;
import org.test.aptosblogdemo.specialization.*;
import org.test.aptosblogdemo.domain.article.CommentEvent.*;

public abstract class AbstractCommentState implements CommentState.SqlCommentState {

    private ArticleCommentId articleCommentId = new ArticleCommentId();

    public ArticleCommentId getArticleCommentId() {
        return this.articleCommentId;
    }

    public void setArticleCommentId(ArticleCommentId articleCommentId) {
        this.articleCommentId = articleCommentId;
    }

    private transient ArticleState articleState;

    public ArticleState getArticleState() {
        return articleState;
    }

    public void setArticleState(ArticleState s) {
        articleState = s;
    }
    
    private ArticleState protectedArticleState;

    protected ArticleState getProtectedArticleState() {
        return protectedArticleState;
    }

    protected void setProtectedArticleState(ArticleState protectedArticleState) {
        this.protectedArticleState = protectedArticleState;
    }

    public BigInteger getArticleId() {
        return this.getArticleCommentId().getArticleId();
    }
        
    public void setArticleId(BigInteger articleId) {
        this.getArticleCommentId().setArticleId(articleId);
    }

    public BigInteger getCommentSeqId() {
        return this.getArticleCommentId().getCommentSeqId();
    }
        
    public void setCommentSeqId(BigInteger commentSeqId) {
        this.getArticleCommentId().setCommentSeqId(commentSeqId);
    }

    private String commenter;

    public String getCommenter() {
        return this.commenter;
    }

    public void setCommenter(String commenter) {
        this.commenter = commenter;
    }

    private String body;

    public String getBody() {
        return this.body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    private String owner;

    public String getOwner() {
        return this.owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private Date updatedAt;

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractCommentState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getCommentSeqId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof CommentState) {
            return Objects.equals(this.getCommentSeqId(), ((CommentState)obj).getCommentSeqId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (false) { 
            ;
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void merge(CommentState s) {
        if (s == this) {
            return;
        }
        this.setCommenter(s.getCommenter());
        this.setBody(s.getBody());
        this.setOwner(s.getOwner());
        this.setActive(s.getActive());
    }

    public void save() {
    }

    protected void throwOnWrongEvent(CommentEvent event) {
        BigInteger stateEntityIdArticleId = this.getArticleCommentId().getArticleId();
        BigInteger eventEntityIdArticleId = ((CommentEvent.SqlCommentEvent)event).getCommentEventId().getArticleId();
        if (!stateEntityIdArticleId.equals(eventEntityIdArticleId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id ArticleId %1$s in state but entity id ArticleId %2$s in event", stateEntityIdArticleId, eventEntityIdArticleId);
        }

        BigInteger stateEntityIdCommentSeqId = this.getArticleCommentId().getCommentSeqId();
        BigInteger eventEntityIdCommentSeqId = ((CommentEvent.SqlCommentEvent)event).getCommentEventId().getCommentSeqId();
        if (!stateEntityIdCommentSeqId.equals(eventEntityIdCommentSeqId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id CommentSeqId %1$s in state but entity id CommentSeqId %2$s in event", stateEntityIdCommentSeqId, eventEntityIdCommentSeqId);
        }


        if (getForReapplying()) { return; }

    }


    public static class SimpleCommentState extends AbstractCommentState {

        public SimpleCommentState() {
        }

        public static SimpleCommentState newForReapplying() {
            SimpleCommentState s = new SimpleCommentState();
            s.initializeForReapplying();
            return s;
        }

    }



}

